// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DoctorConsoleService.proto

#include "DoctorConsoleService.pb.h"
#include "DoctorConsoleService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace doctor_console {

static const char* DoctorConsoleService_method_names[] = {
  "/doctor_console.DoctorConsoleService/registerMe",
  "/doctor_console.DoctorConsoleService/getSettings",
  "/doctor_console.DoctorConsoleService/setSettings",
  "/doctor_console.DoctorConsoleService/getUser",
  "/doctor_console.DoctorConsoleService/getStatus",
  "/doctor_console.DoctorConsoleService/setStatus",
  "/doctor_console.DoctorConsoleService/login",
  "/doctor_console.DoctorConsoleService/logout",
  "/doctor_console.DoctorConsoleService/subscribe",
};

std::unique_ptr< DoctorConsoleService::Stub> DoctorConsoleService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DoctorConsoleService::Stub> stub(new DoctorConsoleService::Stub(channel, options));
  return stub;
}

DoctorConsoleService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_registerMe_(DoctorConsoleService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getSettings_(DoctorConsoleService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setSettings_(DoctorConsoleService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getUser_(DoctorConsoleService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getStatus_(DoctorConsoleService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setStatus_(DoctorConsoleService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_login_(DoctorConsoleService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_logout_(DoctorConsoleService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_subscribe_(DoctorConsoleService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status DoctorConsoleService::Stub::registerMe(::grpc::ClientContext* context, const ::doctor_console::Empty& request, ::doctor_console::ClientToken* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doctor_console::Empty, ::doctor_console::ClientToken, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_registerMe_, context, request, response);
}

void DoctorConsoleService::Stub::async::registerMe(::grpc::ClientContext* context, const ::doctor_console::Empty* request, ::doctor_console::ClientToken* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doctor_console::Empty, ::doctor_console::ClientToken, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerMe_, context, request, response, std::move(f));
}

void DoctorConsoleService::Stub::async::registerMe(::grpc::ClientContext* context, const ::doctor_console::Empty* request, ::doctor_console::ClientToken* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerMe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doctor_console::ClientToken>* DoctorConsoleService::Stub::PrepareAsyncregisterMeRaw(::grpc::ClientContext* context, const ::doctor_console::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doctor_console::ClientToken, ::doctor_console::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_registerMe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doctor_console::ClientToken>* DoctorConsoleService::Stub::AsyncregisterMeRaw(::grpc::ClientContext* context, const ::doctor_console::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncregisterMeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DoctorConsoleService::Stub::getSettings(::grpc::ClientContext* context, const ::doctor_console::Empty& request, ::doctor_console::Settings* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doctor_console::Empty, ::doctor_console::Settings, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getSettings_, context, request, response);
}

void DoctorConsoleService::Stub::async::getSettings(::grpc::ClientContext* context, const ::doctor_console::Empty* request, ::doctor_console::Settings* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doctor_console::Empty, ::doctor_console::Settings, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSettings_, context, request, response, std::move(f));
}

void DoctorConsoleService::Stub::async::getSettings(::grpc::ClientContext* context, const ::doctor_console::Empty* request, ::doctor_console::Settings* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doctor_console::Settings>* DoctorConsoleService::Stub::PrepareAsyncgetSettingsRaw(::grpc::ClientContext* context, const ::doctor_console::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doctor_console::Settings, ::doctor_console::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doctor_console::Settings>* DoctorConsoleService::Stub::AsyncgetSettingsRaw(::grpc::ClientContext* context, const ::doctor_console::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DoctorConsoleService::Stub::setSettings(::grpc::ClientContext* context, const ::doctor_console::Settings& request, ::doctor_console::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doctor_console::Settings, ::doctor_console::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setSettings_, context, request, response);
}

void DoctorConsoleService::Stub::async::setSettings(::grpc::ClientContext* context, const ::doctor_console::Settings* request, ::doctor_console::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doctor_console::Settings, ::doctor_console::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setSettings_, context, request, response, std::move(f));
}

void DoctorConsoleService::Stub::async::setSettings(::grpc::ClientContext* context, const ::doctor_console::Settings* request, ::doctor_console::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doctor_console::Empty>* DoctorConsoleService::Stub::PrepareAsyncsetSettingsRaw(::grpc::ClientContext* context, const ::doctor_console::Settings& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doctor_console::Empty, ::doctor_console::Settings, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doctor_console::Empty>* DoctorConsoleService::Stub::AsyncsetSettingsRaw(::grpc::ClientContext* context, const ::doctor_console::Settings& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DoctorConsoleService::Stub::getUser(::grpc::ClientContext* context, const ::doctor_console::Empty& request, ::doctor_console::User* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doctor_console::Empty, ::doctor_console::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getUser_, context, request, response);
}

void DoctorConsoleService::Stub::async::getUser(::grpc::ClientContext* context, const ::doctor_console::Empty* request, ::doctor_console::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doctor_console::Empty, ::doctor_console::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getUser_, context, request, response, std::move(f));
}

void DoctorConsoleService::Stub::async::getUser(::grpc::ClientContext* context, const ::doctor_console::Empty* request, ::doctor_console::User* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doctor_console::User>* DoctorConsoleService::Stub::PrepareAsyncgetUserRaw(::grpc::ClientContext* context, const ::doctor_console::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doctor_console::User, ::doctor_console::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doctor_console::User>* DoctorConsoleService::Stub::AsyncgetUserRaw(::grpc::ClientContext* context, const ::doctor_console::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DoctorConsoleService::Stub::getStatus(::grpc::ClientContext* context, const ::doctor_console::Empty& request, ::doctor_console::Status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doctor_console::Empty, ::doctor_console::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getStatus_, context, request, response);
}

void DoctorConsoleService::Stub::async::getStatus(::grpc::ClientContext* context, const ::doctor_console::Empty* request, ::doctor_console::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doctor_console::Empty, ::doctor_console::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getStatus_, context, request, response, std::move(f));
}

void DoctorConsoleService::Stub::async::getStatus(::grpc::ClientContext* context, const ::doctor_console::Empty* request, ::doctor_console::Status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doctor_console::Status>* DoctorConsoleService::Stub::PrepareAsyncgetStatusRaw(::grpc::ClientContext* context, const ::doctor_console::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doctor_console::Status, ::doctor_console::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doctor_console::Status>* DoctorConsoleService::Stub::AsyncgetStatusRaw(::grpc::ClientContext* context, const ::doctor_console::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DoctorConsoleService::Stub::setStatus(::grpc::ClientContext* context, const ::doctor_console::Status& request, ::doctor_console::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doctor_console::Status, ::doctor_console::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setStatus_, context, request, response);
}

void DoctorConsoleService::Stub::async::setStatus(::grpc::ClientContext* context, const ::doctor_console::Status* request, ::doctor_console::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doctor_console::Status, ::doctor_console::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setStatus_, context, request, response, std::move(f));
}

void DoctorConsoleService::Stub::async::setStatus(::grpc::ClientContext* context, const ::doctor_console::Status* request, ::doctor_console::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doctor_console::Empty>* DoctorConsoleService::Stub::PrepareAsyncsetStatusRaw(::grpc::ClientContext* context, const ::doctor_console::Status& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doctor_console::Empty, ::doctor_console::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doctor_console::Empty>* DoctorConsoleService::Stub::AsyncsetStatusRaw(::grpc::ClientContext* context, const ::doctor_console::Status& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DoctorConsoleService::Stub::login(::grpc::ClientContext* context, const ::doctor_console::Credentials& request, ::doctor_console::User* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doctor_console::Credentials, ::doctor_console::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_login_, context, request, response);
}

void DoctorConsoleService::Stub::async::login(::grpc::ClientContext* context, const ::doctor_console::Credentials* request, ::doctor_console::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doctor_console::Credentials, ::doctor_console::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_login_, context, request, response, std::move(f));
}

void DoctorConsoleService::Stub::async::login(::grpc::ClientContext* context, const ::doctor_console::Credentials* request, ::doctor_console::User* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doctor_console::User>* DoctorConsoleService::Stub::PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::doctor_console::Credentials& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doctor_console::User, ::doctor_console::Credentials, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doctor_console::User>* DoctorConsoleService::Stub::AsyncloginRaw(::grpc::ClientContext* context, const ::doctor_console::Credentials& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DoctorConsoleService::Stub::logout(::grpc::ClientContext* context, const ::doctor_console::ClientToken& request, ::doctor_console::User* response) {
  return ::grpc::internal::BlockingUnaryCall< ::doctor_console::ClientToken, ::doctor_console::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_logout_, context, request, response);
}

void DoctorConsoleService::Stub::async::logout(::grpc::ClientContext* context, const ::doctor_console::ClientToken* request, ::doctor_console::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::doctor_console::ClientToken, ::doctor_console::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_logout_, context, request, response, std::move(f));
}

void DoctorConsoleService::Stub::async::logout(::grpc::ClientContext* context, const ::doctor_console::ClientToken* request, ::doctor_console::User* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_logout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::doctor_console::User>* DoctorConsoleService::Stub::PrepareAsynclogoutRaw(::grpc::ClientContext* context, const ::doctor_console::ClientToken& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::doctor_console::User, ::doctor_console::ClientToken, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_logout_, context, request);
}

::grpc::ClientAsyncResponseReader< ::doctor_console::User>* DoctorConsoleService::Stub::AsynclogoutRaw(::grpc::ClientContext* context, const ::doctor_console::ClientToken& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclogoutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::doctor_console::Changes>* DoctorConsoleService::Stub::subscribeRaw(::grpc::ClientContext* context, const ::doctor_console::ClientToken& request) {
  return ::grpc::internal::ClientReaderFactory< ::doctor_console::Changes>::Create(channel_.get(), rpcmethod_subscribe_, context, request);
}

void DoctorConsoleService::Stub::async::subscribe(::grpc::ClientContext* context, const ::doctor_console::ClientToken* request, ::grpc::ClientReadReactor< ::doctor_console::Changes>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::doctor_console::Changes>::Create(stub_->channel_.get(), stub_->rpcmethod_subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::doctor_console::Changes>* DoctorConsoleService::Stub::AsyncsubscribeRaw(::grpc::ClientContext* context, const ::doctor_console::ClientToken& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::doctor_console::Changes>::Create(channel_.get(), cq, rpcmethod_subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::doctor_console::Changes>* DoctorConsoleService::Stub::PrepareAsyncsubscribeRaw(::grpc::ClientContext* context, const ::doctor_console::ClientToken& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::doctor_console::Changes>::Create(channel_.get(), cq, rpcmethod_subscribe_, context, request, false, nullptr);
}

DoctorConsoleService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DoctorConsoleService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DoctorConsoleService::Service, ::doctor_console::Empty, ::doctor_console::ClientToken, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DoctorConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doctor_console::Empty* req,
             ::doctor_console::ClientToken* resp) {
               return service->registerMe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DoctorConsoleService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DoctorConsoleService::Service, ::doctor_console::Empty, ::doctor_console::Settings, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DoctorConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doctor_console::Empty* req,
             ::doctor_console::Settings* resp) {
               return service->getSettings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DoctorConsoleService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DoctorConsoleService::Service, ::doctor_console::Settings, ::doctor_console::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DoctorConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doctor_console::Settings* req,
             ::doctor_console::Empty* resp) {
               return service->setSettings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DoctorConsoleService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DoctorConsoleService::Service, ::doctor_console::Empty, ::doctor_console::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DoctorConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doctor_console::Empty* req,
             ::doctor_console::User* resp) {
               return service->getUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DoctorConsoleService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DoctorConsoleService::Service, ::doctor_console::Empty, ::doctor_console::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DoctorConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doctor_console::Empty* req,
             ::doctor_console::Status* resp) {
               return service->getStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DoctorConsoleService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DoctorConsoleService::Service, ::doctor_console::Status, ::doctor_console::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DoctorConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doctor_console::Status* req,
             ::doctor_console::Empty* resp) {
               return service->setStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DoctorConsoleService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DoctorConsoleService::Service, ::doctor_console::Credentials, ::doctor_console::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DoctorConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doctor_console::Credentials* req,
             ::doctor_console::User* resp) {
               return service->login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DoctorConsoleService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DoctorConsoleService::Service, ::doctor_console::ClientToken, ::doctor_console::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DoctorConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doctor_console::ClientToken* req,
             ::doctor_console::User* resp) {
               return service->logout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DoctorConsoleService_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DoctorConsoleService::Service, ::doctor_console::ClientToken, ::doctor_console::Changes>(
          [](DoctorConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::doctor_console::ClientToken* req,
             ::grpc::ServerWriter<::doctor_console::Changes>* writer) {
               return service->subscribe(ctx, req, writer);
             }, this)));
}

DoctorConsoleService::Service::~Service() {
}

::grpc::Status DoctorConsoleService::Service::registerMe(::grpc::ServerContext* context, const ::doctor_console::Empty* request, ::doctor_console::ClientToken* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DoctorConsoleService::Service::getSettings(::grpc::ServerContext* context, const ::doctor_console::Empty* request, ::doctor_console::Settings* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DoctorConsoleService::Service::setSettings(::grpc::ServerContext* context, const ::doctor_console::Settings* request, ::doctor_console::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DoctorConsoleService::Service::getUser(::grpc::ServerContext* context, const ::doctor_console::Empty* request, ::doctor_console::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DoctorConsoleService::Service::getStatus(::grpc::ServerContext* context, const ::doctor_console::Empty* request, ::doctor_console::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DoctorConsoleService::Service::setStatus(::grpc::ServerContext* context, const ::doctor_console::Status* request, ::doctor_console::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DoctorConsoleService::Service::login(::grpc::ServerContext* context, const ::doctor_console::Credentials* request, ::doctor_console::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DoctorConsoleService::Service::logout(::grpc::ServerContext* context, const ::doctor_console::ClientToken* request, ::doctor_console::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DoctorConsoleService::Service::subscribe(::grpc::ServerContext* context, const ::doctor_console::ClientToken* request, ::grpc::ServerWriter< ::doctor_console::Changes>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace doctor_console

